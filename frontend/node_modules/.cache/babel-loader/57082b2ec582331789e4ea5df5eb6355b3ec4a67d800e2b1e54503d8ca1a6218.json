{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\scr\\\\OneDrive\\\\Desktop\\\\new\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport { ThemeProvider, createTheme, CssBaseline } from '@mui/material';\nimport Navbar from './components/Navbar';\nimport OptionChain from './components/OptionChain';\nimport RealtimeInspector from './components/RealtimeInspector';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [darkMode, setDarkMode] = useState(() => {\n    // Initialize from localStorage if available, otherwise use system preference\n    const savedMode = localStorage.getItem('darkMode');\n    if (savedMode !== null) {\n      return savedMode === 'true';\n    }\n    // Check if user prefers dark mode\n    return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n  });\n  const toggleDarkMode = () => {\n    setDarkMode(prevMode => !prevMode);\n  };\n  useEffect(() => {\n    // Save preference to localStorage\n    localStorage.setItem('darkMode', darkMode);\n    // Apply dark mode class to body for global styling\n    if (darkMode) {\n      document.body.classList.add('dark-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n    }\n  }, [darkMode]);\n\n  // Create Material-UI theme based on dark mode preference\n  const theme = createTheme({\n    palette: {\n      mode: darkMode ? 'dark' : 'light',\n      primary: {\n        main: '#2196f3'\n      },\n      secondary: {\n        main: '#f50057'\n      },\n      background: {\n        default: darkMode ? '#121212' : '#f5f5f5',\n        paper: darkMode ? '#1e1e1e' : '#ffffff'\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `app ${darkMode ? 'dark-mode' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(Navbar, {\n          darkMode: darkMode,\n          toggleDarkMode: toggleDarkMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: /*#__PURE__*/_jsxDEV(Routes, {\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              path: \"/\",\n              element: /*#__PURE__*/_jsxDEV(OptionChain, {\n                darkMode: darkMode,\n                toggleDarkMode: toggleDarkMode\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 40\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/realtime-inspector\",\n              element: /*#__PURE__*/_jsxDEV(RealtimeInspector, {\n                darkMode: darkMode,\n                toggleDarkMode: toggleDarkMode\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 58\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"x2akhUm44Dg2FVyuT43vpcC8FCc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Route","Routes","ThemeProvider","createTheme","CssBaseline","Navbar","OptionChain","RealtimeInspector","jsxDEV","_jsxDEV","App","_s","darkMode","setDarkMode","savedMode","localStorage","getItem","window","matchMedia","matches","toggleDarkMode","prevMode","setItem","document","body","classList","add","remove","theme","palette","mode","primary","main","secondary","background","default","paper","children","fileName","_jsxFileName","lineNumber","columnNumber","className","path","element","_c","$RefreshReg$"],"sources":["C:/Users/scr/OneDrive/Desktop/new/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport { ThemeProvider, createTheme, CssBaseline } from '@mui/material';\nimport Navbar from './components/Navbar';\nimport OptionChain from './components/OptionChain';\nimport RealtimeInspector from './components/RealtimeInspector';\nimport './App.css';\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(() => {\n    // Initialize from localStorage if available, otherwise use system preference\n    const savedMode = localStorage.getItem('darkMode');\n    if (savedMode !== null) {\n      return savedMode === 'true';\n    }\n    // Check if user prefers dark mode\n    return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n  });\n\n  const toggleDarkMode = () => {\n    setDarkMode(prevMode => !prevMode);\n  };\n\n  useEffect(() => {\n    // Save preference to localStorage\n    localStorage.setItem('darkMode', darkMode);\n    // Apply dark mode class to body for global styling\n    if (darkMode) {\n      document.body.classList.add('dark-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n    }\n  }, [darkMode]);\n\n  // Create Material-UI theme based on dark mode preference\n  const theme = createTheme({\n    palette: {\n      mode: darkMode ? 'dark' : 'light',\n      primary: {\n        main: '#2196f3',\n      },\n      secondary: {\n        main: '#f50057',\n      },\n      background: {\n        default: darkMode ? '#121212' : '#f5f5f5',\n        paper: darkMode ? '#1e1e1e' : '#ffffff',\n      },\n    },\n  });\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Router>\n        <div className={`app ${darkMode ? 'dark-mode' : ''}`}>\n          <Navbar darkMode={darkMode} toggleDarkMode={toggleDarkMode} />\n          <div className=\"content\">\n            <Routes>\n              <Route path=\"/\" element={<OptionChain darkMode={darkMode} toggleDarkMode={toggleDarkMode} />} />\n              <Route path=\"/realtime-inspector\" element={<RealtimeInspector darkMode={darkMode} toggleDarkMode={toggleDarkMode} />} />\n            </Routes>\n          </div>\n        </div>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}