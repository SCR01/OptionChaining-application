{"ast":null,"code":"/* WebSocket Worker\n * This worker handles WebSocket connections independently from the main thread\n * Features:\n * - Auto reconnection on lost connections\n * - Bandwidth optimization through message batching\n * - Connection status monitoring\n */\n\n/* eslint-disable no-restricted-globals */\n// Using 'self' is standard in web workers, disabling ESLint warning\n\nlet socket = null;\nlet reconnectAttempts = 0;\nconst maxReconnectAttempts = 10;\nconst reconnectInterval = 2000; // 2 seconds\nlet activeSubscriptions = [];\nlet isConnected = false;\nlet pendingUpdates = {};\nlet pendingUpdateTimeout = null;\nconst updateThrottle = 150; // 150ms throttle for updates\n\n// Connection management\nconst connectToWebSocket = () => {\n  const wsUrl = `ws://${self.location.hostname || 'localhost'}:5000`;\n  socket = new WebSocket(wsUrl);\n  socket.onopen = () => {\n    console.log('[Worker] WebSocket connection established');\n    isConnected = true;\n    reconnectAttempts = 0;\n    self.postMessage({\n      type: 'CONNECTION_STATUS',\n      isConnected: true\n    });\n\n    // Resubscribe to tokens after reconnection\n    if (activeSubscriptions.length > 0) {\n      subscribeToTokens(activeSubscriptions);\n    }\n\n    // Start sending periodic pings\n    startPingInterval();\n  };\n  socket.onmessage = event => {\n    try {\n      const message = JSON.parse(event.data);\n      switch (message.type) {\n        case 'INITIAL_DATA':\n          self.postMessage({\n            type: 'INITIAL_DATA',\n            data: message.data\n          });\n          break;\n        case 'PRICE_UPDATE':\n          // Add to pending updates to batch send updates to the main thread\n          batchPriceUpdates(message.data);\n          break;\n        case 'MARKET_STATE':\n          self.postMessage({\n            type: 'MARKET_STATE',\n            data: message.data\n          });\n          break;\n        case 'SUBSCRIPTION_UPDATE':\n          activeSubscriptions = message.subscriptions;\n          self.postMessage({\n            type: 'SUBSCRIPTION_UPDATE',\n            subscriptions: message.subscriptions\n          });\n          break;\n        case 'PONG':\n          // Received pong from server, connection is alive\n          break;\n        default:\n          console.warn(`[Worker] Unknown message type: ${message.type}`);\n      }\n    } catch (error) {\n      console.error('[Worker] Error parsing WebSocket message:', error);\n    }\n  };\n  socket.onclose = event => {\n    console.log(`[Worker] WebSocket connection closed: ${event.code} ${event.reason}`);\n    isConnected = false;\n    self.postMessage({\n      type: 'CONNECTION_STATUS',\n      isConnected: false\n    });\n    stopPingInterval();\n    if (!event.wasClean) {\n      handleReconnect();\n    }\n  };\n  socket.onerror = error => {\n    console.error('[Worker] WebSocket error:', error);\n    self.postMessage({\n      type: 'ERROR',\n      error: 'WebSocket connection error'\n    });\n  };\n};\n\n// Batch price updates to reduce UI updates frequency\nconst batchPriceUpdates = updates => {\n  // Add new updates to pending updates\n  Object.entries(updates).forEach(([token, data]) => {\n    pendingUpdates[token] = data;\n  });\n\n  // If we already have a timeout scheduled, don't schedule another one\n  if (!pendingUpdateTimeout) {\n    pendingUpdateTimeout = setTimeout(() => {\n      if (Object.keys(pendingUpdates).length > 0) {\n        self.postMessage({\n          type: 'PRICE_UPDATE',\n          data: {\n            ...pendingUpdates\n          },\n          timestamp: Date.now()\n        });\n        pendingUpdates = {}; // Clear after sending\n      }\n      pendingUpdateTimeout = null;\n    }, updateThrottle);\n  }\n};\nconst handleReconnect = () => {\n  if (reconnectAttempts >= maxReconnectAttempts) {\n    console.error('[Worker] Max reconnect attempts reached');\n    self.postMessage({\n      type: 'ERROR',\n      error: 'Failed to reconnect after multiple attempts'\n    });\n    return;\n  }\n  reconnectAttempts++;\n  self.postMessage({\n    type: 'RECONNECTING',\n    attempt: reconnectAttempts,\n    maxAttempts: maxReconnectAttempts\n  });\n  setTimeout(() => {\n    connectToWebSocket();\n  }, reconnectInterval * Math.min(reconnectAttempts, 5)); // Incremental backoff\n};\n\n// Keep-alive mechanism\nlet pingInterval = null;\nconst startPingInterval = () => {\n  pingInterval = setInterval(() => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      socket.send(JSON.stringify({\n        type: 'PING'\n      }));\n    }\n  }, 20000); // Ping every 20 seconds\n};\nconst stopPingInterval = () => {\n  if (pingInterval) {\n    clearInterval(pingInterval);\n    pingInterval = null;\n  }\n};\n\n// Token subscription management\nconst subscribeToTokens = tokens => {\n  if (!socket || socket.readyState !== WebSocket.OPEN) {\n    console.warn('[Worker] WebSocket not connected, cannot subscribe');\n    return;\n  }\n  socket.send(JSON.stringify({\n    type: 'SUBSCRIBE',\n    tokens: tokens\n  }));\n};\nconst unsubscribeFromTokens = tokens => {\n  if (!socket || socket.readyState !== WebSocket.OPEN) {\n    console.warn('[Worker] WebSocket not connected, cannot unsubscribe');\n    return;\n  }\n  socket.send(JSON.stringify({\n    type: 'UNSUBSCRIBE',\n    tokens: tokens\n  }));\n};\n\n// Handle messages from the main thread\nself.onmessage = event => {\n  const message = event.data;\n  switch (message.type) {\n    case 'CONNECT':\n      connectToWebSocket();\n      break;\n    case 'DISCONNECT':\n      if (socket) {\n        socket.close();\n        socket = null;\n      }\n      break;\n    case 'SUBSCRIBE':\n      subscribeToTokens(message.tokens);\n      break;\n    case 'UNSUBSCRIBE':\n      unsubscribeFromTokens(message.tokens);\n      break;\n    case 'GET_STATUS':\n      self.postMessage({\n        type: 'CONNECTION_STATUS',\n        isConnected: isConnected\n      });\n      break;\n    default:\n      console.warn(`[Worker] Unknown message type from main thread: ${message.type}`);\n  }\n};\n\n// Start connection automatically\nconnectToWebSocket();","map":{"version":3,"names":["socket","reconnectAttempts","maxReconnectAttempts","reconnectInterval","activeSubscriptions","isConnected","pendingUpdates","pendingUpdateTimeout","updateThrottle","connectToWebSocket","wsUrl","self","location","hostname","WebSocket","onopen","console","log","postMessage","type","length","subscribeToTokens","startPingInterval","onmessage","event","message","JSON","parse","data","batchPriceUpdates","subscriptions","warn","error","onclose","code","reason","stopPingInterval","wasClean","handleReconnect","onerror","updates","Object","entries","forEach","token","setTimeout","keys","timestamp","Date","now","attempt","maxAttempts","Math","min","pingInterval","setInterval","readyState","OPEN","send","stringify","clearInterval","tokens","unsubscribeFromTokens","close"],"sources":["C:/Users/scr/OneDrive/Desktop/new/frontend/src/workers/websocketWorker.js"],"sourcesContent":["/* WebSocket Worker\n * This worker handles WebSocket connections independently from the main thread\n * Features:\n * - Auto reconnection on lost connections\n * - Bandwidth optimization through message batching\n * - Connection status monitoring\n */\n\n/* eslint-disable no-restricted-globals */\n// Using 'self' is standard in web workers, disabling ESLint warning\n\nlet socket = null;\nlet reconnectAttempts = 0;\nconst maxReconnectAttempts = 10;\nconst reconnectInterval = 2000; // 2 seconds\nlet activeSubscriptions = [];\nlet isConnected = false;\nlet pendingUpdates = {};\nlet pendingUpdateTimeout = null;\nconst updateThrottle = 150; // 150ms throttle for updates\n\n// Connection management\nconst connectToWebSocket = () => {\n  const wsUrl = `ws://${self.location.hostname || 'localhost'}:5000`;\n  \n  socket = new WebSocket(wsUrl);\n  \n  socket.onopen = () => {\n    console.log('[Worker] WebSocket connection established');\n    isConnected = true;\n    reconnectAttempts = 0;\n    self.postMessage({ type: 'CONNECTION_STATUS', isConnected: true });\n    \n    // Resubscribe to tokens after reconnection\n    if (activeSubscriptions.length > 0) {\n      subscribeToTokens(activeSubscriptions);\n    }\n    \n    // Start sending periodic pings\n    startPingInterval();\n  };\n\n  socket.onmessage = (event) => {\n    try {\n      const message = JSON.parse(event.data);\n      \n      switch (message.type) {\n        case 'INITIAL_DATA':\n          self.postMessage({ type: 'INITIAL_DATA', data: message.data });\n          break;\n        case 'PRICE_UPDATE':\n          // Add to pending updates to batch send updates to the main thread\n          batchPriceUpdates(message.data);\n          break;\n        case 'MARKET_STATE':\n          self.postMessage({ type: 'MARKET_STATE', data: message.data });\n          break;\n        case 'SUBSCRIPTION_UPDATE':\n          activeSubscriptions = message.subscriptions;\n          self.postMessage({ type: 'SUBSCRIPTION_UPDATE', subscriptions: message.subscriptions });\n          break;\n        case 'PONG':\n          // Received pong from server, connection is alive\n          break;\n        default:\n          console.warn(`[Worker] Unknown message type: ${message.type}`);\n      }\n    } catch (error) {\n      console.error('[Worker] Error parsing WebSocket message:', error);\n    }\n  };\n\n  socket.onclose = (event) => {\n    console.log(`[Worker] WebSocket connection closed: ${event.code} ${event.reason}`);\n    isConnected = false;\n    self.postMessage({ type: 'CONNECTION_STATUS', isConnected: false });\n    stopPingInterval();\n    \n    if (!event.wasClean) {\n      handleReconnect();\n    }\n  };\n\n  socket.onerror = (error) => {\n    console.error('[Worker] WebSocket error:', error);\n    self.postMessage({ type: 'ERROR', error: 'WebSocket connection error' });\n  };\n};\n\n// Batch price updates to reduce UI updates frequency\nconst batchPriceUpdates = (updates) => {\n  // Add new updates to pending updates\n  Object.entries(updates).forEach(([token, data]) => {\n    pendingUpdates[token] = data;\n  });\n  \n  // If we already have a timeout scheduled, don't schedule another one\n  if (!pendingUpdateTimeout) {\n    pendingUpdateTimeout = setTimeout(() => {\n      if (Object.keys(pendingUpdates).length > 0) {\n        self.postMessage({ \n          type: 'PRICE_UPDATE', \n          data: { ...pendingUpdates },\n          timestamp: Date.now()\n        });\n        pendingUpdates = {}; // Clear after sending\n      }\n      pendingUpdateTimeout = null;\n    }, updateThrottle);\n  }\n};\n\nconst handleReconnect = () => {\n  if (reconnectAttempts >= maxReconnectAttempts) {\n    console.error('[Worker] Max reconnect attempts reached');\n    self.postMessage({ \n      type: 'ERROR', \n      error: 'Failed to reconnect after multiple attempts' \n    });\n    return;\n  }\n\n  reconnectAttempts++;\n  \n  self.postMessage({ \n    type: 'RECONNECTING', \n    attempt: reconnectAttempts,\n    maxAttempts: maxReconnectAttempts\n  });\n  \n  setTimeout(() => {\n    connectToWebSocket();\n  }, reconnectInterval * Math.min(reconnectAttempts, 5)); // Incremental backoff\n};\n\n// Keep-alive mechanism\nlet pingInterval = null;\n\nconst startPingInterval = () => {\n  pingInterval = setInterval(() => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      socket.send(JSON.stringify({ type: 'PING' }));\n    }\n  }, 20000); // Ping every 20 seconds\n};\n\nconst stopPingInterval = () => {\n  if (pingInterval) {\n    clearInterval(pingInterval);\n    pingInterval = null;\n  }\n};\n\n// Token subscription management\nconst subscribeToTokens = (tokens) => {\n  if (!socket || socket.readyState !== WebSocket.OPEN) {\n    console.warn('[Worker] WebSocket not connected, cannot subscribe');\n    return;\n  }\n\n  socket.send(JSON.stringify({\n    type: 'SUBSCRIBE',\n    tokens: tokens\n  }));\n};\n\nconst unsubscribeFromTokens = (tokens) => {\n  if (!socket || socket.readyState !== WebSocket.OPEN) {\n    console.warn('[Worker] WebSocket not connected, cannot unsubscribe');\n    return;\n  }\n\n  socket.send(JSON.stringify({\n    type: 'UNSUBSCRIBE',\n    tokens: tokens\n  }));\n};\n\n// Handle messages from the main thread\nself.onmessage = (event) => {\n  const message = event.data;\n  \n  switch (message.type) {\n    case 'CONNECT':\n      connectToWebSocket();\n      break;\n    case 'DISCONNECT':\n      if (socket) {\n        socket.close();\n        socket = null;\n      }\n      break;\n    case 'SUBSCRIBE':\n      subscribeToTokens(message.tokens);\n      break;\n    case 'UNSUBSCRIBE':\n      unsubscribeFromTokens(message.tokens);\n      break;\n    case 'GET_STATUS':\n      self.postMessage({ \n        type: 'CONNECTION_STATUS', \n        isConnected: isConnected \n      });\n      break;\n    default:\n      console.warn(`[Worker] Unknown message type from main thread: ${message.type}`);\n  }\n};\n\n// Start connection automatically\nconnectToWebSocket();\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,IAAIA,MAAM,GAAG,IAAI;AACjB,IAAIC,iBAAiB,GAAG,CAAC;AACzB,MAAMC,oBAAoB,GAAG,EAAE;AAC/B,MAAMC,iBAAiB,GAAG,IAAI,CAAC,CAAC;AAChC,IAAIC,mBAAmB,GAAG,EAAE;AAC5B,IAAIC,WAAW,GAAG,KAAK;AACvB,IAAIC,cAAc,GAAG,CAAC,CAAC;AACvB,IAAIC,oBAAoB,GAAG,IAAI;AAC/B,MAAMC,cAAc,GAAG,GAAG,CAAC,CAAC;;AAE5B;AACA,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAC/B,MAAMC,KAAK,GAAG,QAAQC,IAAI,CAACC,QAAQ,CAACC,QAAQ,IAAI,WAAW,OAAO;EAElEb,MAAM,GAAG,IAAIc,SAAS,CAACJ,KAAK,CAAC;EAE7BV,MAAM,CAACe,MAAM,GAAG,MAAM;IACpBC,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;IACxDZ,WAAW,GAAG,IAAI;IAClBJ,iBAAiB,GAAG,CAAC;IACrBU,IAAI,CAACO,WAAW,CAAC;MAAEC,IAAI,EAAE,mBAAmB;MAAEd,WAAW,EAAE;IAAK,CAAC,CAAC;;IAElE;IACA,IAAID,mBAAmB,CAACgB,MAAM,GAAG,CAAC,EAAE;MAClCC,iBAAiB,CAACjB,mBAAmB,CAAC;IACxC;;IAEA;IACAkB,iBAAiB,CAAC,CAAC;EACrB,CAAC;EAEDtB,MAAM,CAACuB,SAAS,GAAIC,KAAK,IAAK;IAC5B,IAAI;MACF,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC;MAEtC,QAAQH,OAAO,CAACN,IAAI;QAClB,KAAK,cAAc;UACjBR,IAAI,CAACO,WAAW,CAAC;YAAEC,IAAI,EAAE,cAAc;YAAES,IAAI,EAAEH,OAAO,CAACG;UAAK,CAAC,CAAC;UAC9D;QACF,KAAK,cAAc;UACjB;UACAC,iBAAiB,CAACJ,OAAO,CAACG,IAAI,CAAC;UAC/B;QACF,KAAK,cAAc;UACjBjB,IAAI,CAACO,WAAW,CAAC;YAAEC,IAAI,EAAE,cAAc;YAAES,IAAI,EAAEH,OAAO,CAACG;UAAK,CAAC,CAAC;UAC9D;QACF,KAAK,qBAAqB;UACxBxB,mBAAmB,GAAGqB,OAAO,CAACK,aAAa;UAC3CnB,IAAI,CAACO,WAAW,CAAC;YAAEC,IAAI,EAAE,qBAAqB;YAAEW,aAAa,EAAEL,OAAO,CAACK;UAAc,CAAC,CAAC;UACvF;QACF,KAAK,MAAM;UACT;UACA;QACF;UACEd,OAAO,CAACe,IAAI,CAAC,kCAAkCN,OAAO,CAACN,IAAI,EAAE,CAAC;MAClE;IACF,CAAC,CAAC,OAAOa,KAAK,EAAE;MACdhB,OAAO,CAACgB,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;IACnE;EACF,CAAC;EAEDhC,MAAM,CAACiC,OAAO,GAAIT,KAAK,IAAK;IAC1BR,OAAO,CAACC,GAAG,CAAC,yCAAyCO,KAAK,CAACU,IAAI,IAAIV,KAAK,CAACW,MAAM,EAAE,CAAC;IAClF9B,WAAW,GAAG,KAAK;IACnBM,IAAI,CAACO,WAAW,CAAC;MAAEC,IAAI,EAAE,mBAAmB;MAAEd,WAAW,EAAE;IAAM,CAAC,CAAC;IACnE+B,gBAAgB,CAAC,CAAC;IAElB,IAAI,CAACZ,KAAK,CAACa,QAAQ,EAAE;MACnBC,eAAe,CAAC,CAAC;IACnB;EACF,CAAC;EAEDtC,MAAM,CAACuC,OAAO,GAAIP,KAAK,IAAK;IAC1BhB,OAAO,CAACgB,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjDrB,IAAI,CAACO,WAAW,CAAC;MAAEC,IAAI,EAAE,OAAO;MAAEa,KAAK,EAAE;IAA6B,CAAC,CAAC;EAC1E,CAAC;AACH,CAAC;;AAED;AACA,MAAMH,iBAAiB,GAAIW,OAAO,IAAK;EACrC;EACAC,MAAM,CAACC,OAAO,CAACF,OAAO,CAAC,CAACG,OAAO,CAAC,CAAC,CAACC,KAAK,EAAEhB,IAAI,CAAC,KAAK;IACjDtB,cAAc,CAACsC,KAAK,CAAC,GAAGhB,IAAI;EAC9B,CAAC,CAAC;;EAEF;EACA,IAAI,CAACrB,oBAAoB,EAAE;IACzBA,oBAAoB,GAAGsC,UAAU,CAAC,MAAM;MACtC,IAAIJ,MAAM,CAACK,IAAI,CAACxC,cAAc,CAAC,CAACc,MAAM,GAAG,CAAC,EAAE;QAC1CT,IAAI,CAACO,WAAW,CAAC;UACfC,IAAI,EAAE,cAAc;UACpBS,IAAI,EAAE;YAAE,GAAGtB;UAAe,CAAC;UAC3ByC,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;QACtB,CAAC,CAAC;QACF3C,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC;MACvB;MACAC,oBAAoB,GAAG,IAAI;IAC7B,CAAC,EAAEC,cAAc,CAAC;EACpB;AACF,CAAC;AAED,MAAM8B,eAAe,GAAGA,CAAA,KAAM;EAC5B,IAAIrC,iBAAiB,IAAIC,oBAAoB,EAAE;IAC7Cc,OAAO,CAACgB,KAAK,CAAC,yCAAyC,CAAC;IACxDrB,IAAI,CAACO,WAAW,CAAC;MACfC,IAAI,EAAE,OAAO;MACba,KAAK,EAAE;IACT,CAAC,CAAC;IACF;EACF;EAEA/B,iBAAiB,EAAE;EAEnBU,IAAI,CAACO,WAAW,CAAC;IACfC,IAAI,EAAE,cAAc;IACpB+B,OAAO,EAAEjD,iBAAiB;IAC1BkD,WAAW,EAAEjD;EACf,CAAC,CAAC;EAEF2C,UAAU,CAAC,MAAM;IACfpC,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAEN,iBAAiB,GAAGiD,IAAI,CAACC,GAAG,CAACpD,iBAAiB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1D,CAAC;;AAED;AACA,IAAIqD,YAAY,GAAG,IAAI;AAEvB,MAAMhC,iBAAiB,GAAGA,CAAA,KAAM;EAC9BgC,YAAY,GAAGC,WAAW,CAAC,MAAM;IAC/B,IAAIvD,MAAM,IAAIA,MAAM,CAACwD,UAAU,KAAK1C,SAAS,CAAC2C,IAAI,EAAE;MAClDzD,MAAM,CAAC0D,IAAI,CAAChC,IAAI,CAACiC,SAAS,CAAC;QAAExC,IAAI,EAAE;MAAO,CAAC,CAAC,CAAC;IAC/C;EACF,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;AACb,CAAC;AAED,MAAMiB,gBAAgB,GAAGA,CAAA,KAAM;EAC7B,IAAIkB,YAAY,EAAE;IAChBM,aAAa,CAACN,YAAY,CAAC;IAC3BA,YAAY,GAAG,IAAI;EACrB;AACF,CAAC;;AAED;AACA,MAAMjC,iBAAiB,GAAIwC,MAAM,IAAK;EACpC,IAAI,CAAC7D,MAAM,IAAIA,MAAM,CAACwD,UAAU,KAAK1C,SAAS,CAAC2C,IAAI,EAAE;IACnDzC,OAAO,CAACe,IAAI,CAAC,oDAAoD,CAAC;IAClE;EACF;EAEA/B,MAAM,CAAC0D,IAAI,CAAChC,IAAI,CAACiC,SAAS,CAAC;IACzBxC,IAAI,EAAE,WAAW;IACjB0C,MAAM,EAAEA;EACV,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAMC,qBAAqB,GAAID,MAAM,IAAK;EACxC,IAAI,CAAC7D,MAAM,IAAIA,MAAM,CAACwD,UAAU,KAAK1C,SAAS,CAAC2C,IAAI,EAAE;IACnDzC,OAAO,CAACe,IAAI,CAAC,sDAAsD,CAAC;IACpE;EACF;EAEA/B,MAAM,CAAC0D,IAAI,CAAChC,IAAI,CAACiC,SAAS,CAAC;IACzBxC,IAAI,EAAE,aAAa;IACnB0C,MAAM,EAAEA;EACV,CAAC,CAAC,CAAC;AACL,CAAC;;AAED;AACAlD,IAAI,CAACY,SAAS,GAAIC,KAAK,IAAK;EAC1B,MAAMC,OAAO,GAAGD,KAAK,CAACI,IAAI;EAE1B,QAAQH,OAAO,CAACN,IAAI;IAClB,KAAK,SAAS;MACZV,kBAAkB,CAAC,CAAC;MACpB;IACF,KAAK,YAAY;MACf,IAAIT,MAAM,EAAE;QACVA,MAAM,CAAC+D,KAAK,CAAC,CAAC;QACd/D,MAAM,GAAG,IAAI;MACf;MACA;IACF,KAAK,WAAW;MACdqB,iBAAiB,CAACI,OAAO,CAACoC,MAAM,CAAC;MACjC;IACF,KAAK,aAAa;MAChBC,qBAAqB,CAACrC,OAAO,CAACoC,MAAM,CAAC;MACrC;IACF,KAAK,YAAY;MACflD,IAAI,CAACO,WAAW,CAAC;QACfC,IAAI,EAAE,mBAAmB;QACzBd,WAAW,EAAEA;MACf,CAAC,CAAC;MACF;IACF;MACEW,OAAO,CAACe,IAAI,CAAC,mDAAmDN,OAAO,CAACN,IAAI,EAAE,CAAC;EACnF;AACF,CAAC;;AAED;AACAV,kBAAkB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}